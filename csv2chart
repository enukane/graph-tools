#!/usr/bin/env ruby
require "erb"
require "optparse"
require "fileutils"

class CSV2Chart
  #
  # @data = {
  #   "series_name0" => [ value0_0, value0_1, value0_2, ... ],
  #   "series_name1" => [ value1_0, value1_0, value1_2, ... ],
  #   ...
  # ]
  #
  TEMPLATE_STR= <<"TEMPLATE_END"
<!DOCTYPE HTML>
<html>
	<head>
		<script type="text/javascript">
			window.onload = function() {
				var chart = new CanvasJS.Chart("chartContainer",
				{
					zoomEnabled: true,
					panEnabled: true,
					title : {
						text: "<%= @title_text %>"
					},
					axisY: {
					includeZero: false,
					},
					data : [
					<% @data.each_with_index do |pair, series_idx| %>
					<% next if @first and series_idx == 0 %>
					<% next if @unix and series_idx == 0 %>
					<% series_name = pair[0] %>
					<% series_vals = pair[1] %>
					{
						type: "line",
						showInLegend: true,
						name: "<%= series_name %>",
						legendText: "<%= series_name %>",
						<% if @unix %>
						xValueType: "dateTime",
						<% end %>
						dataPoints: [
						<% series_vals.each_with_index do |val, jdx| %>
							{ 
								<% xname = @columnnamesary[0] || 0.to_s %>
								<% if @unix %>
								x: <%= @data[xname][jdx].to_i * 1000 %>,
								<% elsif @int %>
								x: <%= @data[xname][jdx].to_i %>,
								<% end %>
								y: <%= val %>
							},
						<% end %>
						]
					},
					<% end %>
					]
				});

				chart.render();
			}
		</script>
		<script type="text/javascript", src="canvasjs.min.js"></script>
	</head>
	<body>
		<div id="chartContainer">
		</div>
	</body>
</html>
TEMPLATE_END

  TITLETEXT="TITLE"
  OUTPUTDIR="output"
  OUTPUT="output.html"
  VENDORJS="vendor/canvasjs.min.js"
  OPTS = {}

  def initialize args
    @flist = []
    @names = {}
    @data = {}
    @title_text = ""
    @multicolumn = ""
    @columnnames = ""

    parse_args(args)
  end

  def parse_args args
    # @flist, @title_text
    opt = OptionParser.new

    opt.on("-t VAL") {|v| OPTS[:title] = v } # title
    opt.on("-o VAL") {|v| OPTS[:outputdir] = v } # output
    opt.on("-m VAL") {|v| OPTS[:multicolumn] = v } # multicolumn file
    opt.on("-c VAL") {|v| OPTS[:columnnames] = v} # multicolumn name
    opt.on("-n VAL") {|v| OPTS[:output] = v }
    opt.on("-F")     {|v| OPTS[:first] = true }
    opt.on("-U")     {|v| OPTS[:unix] = true }
    opt.on("-f")     {|v| OPTS[:force] = true }
    opt.on("-i")     {|v| OPTS[:int] = true }
    opt.on("-h")     {|v| usage }

    opt.parse!(args)

    @title_text = OPTS[:title] || ""
    @outputdir = OPTS[:outputdir] || OUTPUTDIR
    @multicolumn = OPTS[:multicolumn] || nil
    @columnnames = OPTS[:columnnames] || ""
    @output = OPTS[:output] || OUTPUT
    @first = OPTS[:first] || false
    @unix = OPTS[:unix] || false
    @force = OPTS[:force] || false
    @int = OPTS[:int] || false
    @flist = args

    # verbose check
    if @multicolumn && @flist.length != 0
      print "Multicolumn file is specified. Rest file would be ignored (@flist)\n"
    end
  end

  def usage
    print "This command parses single & multicolumn csv file and draw chart in html\n"
    print "Can accept multi single column csv file or multicolumn file by '-m'\n"
    print "With multicolumn file, '-c' with comma-separated column name can be used\n"
    print "\n"
    print "Usage: csv2chart [-fFhsU] [-t title] [-o outputdir] [-n outputfile] [-c column0,column1...] [-m mcsvfile] csvfile csvfile1 csvfile2 ...\n"
    print "   -f              force overwrite outputdir and outputfile\n"
    print "   -F              ignore first column\n"
    print "   -h              show this help\n"
    print "   -U              translate first column from Unix epoch to local time string\n"
    print "   -i              translate first column from string to integer\n"
    print "   -t <title>      set TITLE to <title>\n"
    print "   -o <dir>        use specified directory for output (creates if not exists)\n"
    print "   -n <name>       use specified name to output html (default: output.html)\n"
    print "   -m <csvfile>    specify source multi-column csv file\n"
    print "   -c <columns>    comma-separated name for each series in multi-column csv (used with -m)\n"
    print "   <args>          multiple csv files to combine (exclusive with -m)\n"
    print "\n"
    print "Typical Usage:\n"
    print ">> Plot simple csv file (contains timestamp and data)\n"
    print "   % csv2chart -U -t \"THIS IS IT\" -o myoutput -n myoutput0.html -m myoutput0.csv -c Time,Value\n"
    print "\n"
    print ">> Plot multi-column csv file\n"
    print "   % csv2chart -U -t \"THIS IS IT\" -o myoutput -n myoutput0.html -m myoutput0.csv -c Time,Height,Width\n"
    print "\n"
    print ">> Combine and plot multiple csv file\n"
    print "   % csv2chart -t \"THIS IS IT\" -o myoutput -n myoutput0.html data0.csv data1.csv data2.csv\n"
    print "\n"
    exit
  end

  def examine_file fname
    raise "Requires valid path #{fname}" unless File.exists?(fname)
    raise "Requires normal file" unless File.ftype(fname) == "file"
    return true
  end

  def examine_flist
    usage if @flist.length == 0
    @flist.each do |fname|
      examine_file fname
      legend = fname.split(".")[0]
      @names[fname] = File.basename(legend)
    end
    return @flist
  end

  def parse_file fname
    array = []
    File.open(fname) do |file|
      while line = file.gets
        line.strip!
        elms = line.gsub(",", " ").split
        val = elms[0]
        array << val
      end
    end

    return array
  end

  def parse_flist
    @names.each do |fname, legend|
      array = parse_file fname
      @data[legend] = array
    end
  end

  def output_html
    if File.exists?(@outputdir)
      if @force
        print "FORCE: path (#{@outputdir}) already exists but overwrite\n"
      else
        print "ERROR: path (#{@outputdir}) already exists\n"
        exit 1
      end
    else
      Dir.mkdir(@outputdir)
    end

    erb = ERB.new(TEMPLATE_STR)
    path = "#{@outputdir}/#{@output}"
    File.open(path, "w") do |file|
      file.write(erb.result(binding))
    end
    print "File outputed to '#{path}'\n"

    if FileUtils.copy(VENDORJS, "#{@outputdir}/")
      print "Vendor JS file (#{VENDORJS}) copied to '#{@outputdir}/'\n"
    end
  end

  def output
    if @multicolumn
      output_multicolumn
      return
    end
    examine_flist
    parse_flist
    output_html
  end

  def examine_multicolumn_file
    return examine_file @multicolumn
  end

  def parse_multicolumn_file fname
    arrays = []
    File.open(fname) do |file|
      while line = file.gets
        line.strip!
        elms = line.gsub(",", " ").split
        elms.each_with_index do |elm, idx|
          arrays[idx] = [] if arrays[idx] == nil
          arrays[idx] << elm
        end
      end
    end
    return arrays
  end

  def regulate_multicolumn_table table
    @columnnamesary = @columnnames.strip.split(",")
    table.each_with_index do |array, idx|
      name = @columnnamesary[idx] || idx.to_s
      @data[name] = array
    end
  end

  def output_multicolumn
    examine_multicolumn_file
    parse_multicolumn_file @multicolumn
    @multicolumn_table = parse_multicolumn_file @multicolumn
    regulate_multicolumn_table @multicolumn_table
    output_html
  end
end

CSV2Chart.new(ARGV).output
